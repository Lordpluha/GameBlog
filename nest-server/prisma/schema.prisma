generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isEditor  Boolean   @default(false)
  role      Role      @default(USER)
  articles  Article[]
  blogs     Blog[]
  comments  Comment[]
  token     Token?

  @@map("users")
}

model Token {
  id           Int      @id @default(autoincrement())
  refreshToken String   @unique
  userId       Int      @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@map("tokens")
}

model Blog {
  id        Int       @id @default(autoincrement())
  title     String
  preview   String
  views     Int       @default(0)
  content   String
  slug      String?   @unique
  authorId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]

  @@map("blogs")
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[] @relation("ArticleToTags")

  @@map("tags")
}

model Article {
  id         Int        @id @default(autoincrement())
  title      String
  content    String
  views      Int        @default(0)
  preview    String
  slug       String?    @unique
  isVerif    Boolean    @default(false)
  authorId   Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  anyTags    String[]
  author     User       @relation(fields: [authorId], references: [id])
  comments   Comment[]
  categories Category[] @relation("ArticleToCategory")
  tags       Tag[]      @relation("ArticleToTags")

  @@map("articles")
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  slug      String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  parentId  Int?
  level     Int?
  parent    Category?  @relation("SubCategory", fields: [parentId], references: [id])
  children  Category[] @relation("SubCategory")
  articles  Article[]  @relation("ArticleToCategory")

  @@map("categories")
}

model Comment {
  id        Int         @id @default(autoincrement())
  text      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  articleId Int?
  blogId    Int?
  authorId  Int
  parentId  Int?
  level     Int?
  type      TypeContent
  article   Article?    @relation(fields: [articleId], references: [id])
  author    User        @relation(fields: [authorId], references: [id])
  blog      Blog?       @relation(fields: [blogId], references: [id])
  parent    Comment?    @relation("SubComment", fields: [parentId], references: [id])
  children  Comment[]   @relation("SubComment")

  @@map("comments")
}

enum Role {
  USER
  AUTHOR
  EDITOR
  ADMIN
}

enum TypeContent {
  blog
  article
}
